const { Scenes, Markup } = require('telegraf');
const {saveMessage} = require("../db/models");
const {broadcast} = require("../webhooks/websocket");
const pool = require("../db");

function setupScenes(stage) {
    const chatScene = new Scenes.BaseScene('chatScene');
    const suggestionScene = new Scenes.BaseScene('suggestionScene');

    suggestionScene.enter((ctx) => ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:'));
    suggestionScene.on('text', async (ctx) => {
        const suggestion = ctx.message.text;
        const userId = ctx.from.id;
        const { username, first_name, last_name } = ctx.from;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query('INSERT INTO suggestions(user_id, username, first_name, last_name, suggestion) VALUES($1, $2, $3, $4, $5)', [userId, username, first_name, last_name, suggestion]);

        ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!');
        ctx.scene.leave();
    });
    chatScene.enter((ctx) => ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏! –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–ª—É—á–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏! –í–≤–µ–¥–∏—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞. ', Markup.keyboard([
        ['–í—ã—Ö–æ–¥ —Å —á–∞—Ç–∞']
    ])));
    chatScene.on('text', async (ctx) => {
        const text = ctx.message.text;
        if (text === '/exit' || text === '–í—ã—Ö–æ–¥ —Å —á–∞—Ç–∞') {
            ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.');
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
                ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏'],
                ['üó∫ –ö–∞—Ä—Ç–∞ —Ç–æ—á–µ–∫ –û–ü'],
                ['ü§≥ –ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏'],
                ['‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'],
                ['üí° –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞'],
                ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä'],
                ['üí¨ –ß–∞—Ç —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º'],
                ['üèò –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ñ–ö']
            ]).resize());
            return ctx.scene.leave();
        }

        const photos = await ctx.telegram.getUserProfilePhotos(ctx.from.id);
        let file_id='default'
        if (photos && photos.total_count > 0) {
            file_id = photos.photos[0][0].file_id; // Getting the file ID of the latest photo
        }

        // User details
        const userDetails = {
            userId: ctx.from.id, // User's Telegram ID
            firstName: ctx.from.first_name, // User's first name
            lastName: ctx.from.last_name, // User's last name (might be undefined)
            username: ctx.from.username, // User's Telegram username (might be undefined)
            languageCode: ctx.from.language_code, // User's Telegram client's language
            profileImageId: file_id
        };

        try {
            const {rows} = await saveMessage(userDetails, text, false);
            broadcast({messageId: rows[0].id ,message: text, userData: userDetails, fromConsultant: false}); // Broadcast the message to all connected WebSocket clients
        } catch (error) {
            console.error('Error in webhook route:', error);
        }
    });
    chatScene.on('message', (ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'));

    stage.register(chatScene);
    stage.register(suggestionScene);
}

module.exports = setupScenes;